
# user
#  id -  generated by mongo
#  username
#  dob
#  email
#  password
#  gender
#  level - enthusiast, bigineer, film school student, professional, 
#  if professional then ask for total industry experience, valid documents, recent work 
#  if film school student then ask for valid documents
from typing import List, Optional, Literal
from pydantic import BaseModel, EmailStr, Field, model_validator
from datetime import datetime
from bson import ObjectId
from pydantic_core import core_schema
from typing import Any


class PyObjectId(ObjectId):
    @classmethod
    def __get_pydantic_core_schema__(cls, source_type: Any, handler):
        return core_schema.no_info_wrap_validator_function(
            cls.validate,
            core_schema.str_schema()
        )

    @classmethod
    def validate(cls, v: Any) -> str:
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return str(v)


class UserModel(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    username: str
    dob: datetime
    email: EmailStr
    password: str
    gender: Literal["male", "female", "other"]
    level: Literal["enthusiast", "beginner", "film_school_student", "professional"]

    total_industry_experience: Optional[int] = Field(default=None, ge=0)
    valid_documents: Optional[str] = None
    recent_work: Optional[str] = None

    @model_validator(mode='after')
    def validate_level_requirements(self):
        if self.level == "professional":
            if self.total_industry_experience is None:
                raise ValueError("Total industry experience is required for professionals")
            if not self.recent_work:
                raise ValueError("Recent work is required for professionals")
            if not self.valid_documents:
                raise ValueError("Valid documents are required for professionals")
        
        if self.level == "film_school_student":
            if not self.valid_documents:
                raise ValueError("Valid documents are required for film school students")
        
        return self

    class Config:
        populate_by_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        schema_extra = {
            "example": {
                "username": "Alex Director",
                "dob": "1990-08-12T00:00:00",
                "email": "alex@example.com",
                "password": "hashed_password_here",
                "gender": "male",
                "level": "professional",
                "total_industry_experience": 7,
                "valid_documents": "https://link-to-documents.com/proof.pdf",
                "recent_work": "https://portfolio.com/recent_project",
            }
        }


class UserCreate(BaseModel):
    username: str
    dob: datetime
    email: EmailStr
    password: str
    gender: Literal["male", "female", "other"]
    level: Literal["enthusiast", "beginner", "film_school_student", "professional"]

    total_industry_experience: Optional[int] = Field(None, ge=0)
    valid_documents: Optional[str] = None
    recent_work: Optional[str] = None
    # friends: List[str] = []

    @model_validator(mode='after')
    def validate_level_requirements(self):
        if self.level == "professional":
            if self.total_industry_experience is None:
                raise ValueError("Total industry experience is required for professionals")
            if not self.recent_work:
                raise ValueError("Recent work is required for professionals")
            if not self.valid_documents:
                raise ValueError("Valid documents are required for professionals")
        
        if self.level == "film_school_student":
            if not self.valid_documents:
                raise ValueError("Valid documents are required for film school students")
        
        return self

    class Config:
        from_attributes = True