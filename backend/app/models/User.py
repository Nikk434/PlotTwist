
# user
#  id -  generated by mongo
#  name
#  dob
#  email
#  password
#  gender
#  level - enthusiast, bigineer, film school student, professional, 
#  if professional then ask for total industry experience, valid documents, recent work 
#  if film school student then ask for valid documents
from typing import List, Optional, Literal
from pydantic import BaseModel, EmailStr, Field
from datetime import datetime
from bson import ObjectId

# To handle MongoDB ObjectId as string
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return str(v)


# âœ… This is the model used when storing/retrieving from the DB
class UserModel(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    name: str
    dob: datetime
    email: EmailStr
    password: str
    gender: Literal["male", "female", "other"]
    level: Literal["enthusiast", "beginner", "film_school_student", "professional"]

    total_industry_experience: Optional[int] = Field(None, ge=0)
    valid_documents: Optional[str]  # Could be a URL or file path
    recent_work: Optional[str]      # Could be a URL or file path
    # friends: List[str] = []

    #@validator("total_industry_experience", always=True)
    def require_experience_for_professional(cls, v, values):
        if values.get("level") == "professional" and v is None:
            raise ValueError("Total industry experience is required for professionals")
        return v

    #@validator("valid_documents", always=True)
    def require_documents_for_specific_levels(cls, v, values):
        if values.get("level") in ["professional", "film_school_student"] and not v:
            raise ValueError("Valid documents are required for professionals and film school students")
        return v

    #@validator("recent_work", always=True)
    def require_recent_work_for_professional(cls, v, values):
        if values.get("level") == "professional" and not v:
            raise ValueError("Recent work is required for professionals")
        return v

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        schema_extra = {
            "example": {
                "name": "Alex Director",
                "dob": "1990-08-12T00:00:00",
                "email": "alex@example.com",
                "password": "hashed_password_here",
                "gender": "male",
                "level": "professional",
                "total_industry_experience": 7,
                "valid_documents": "https://link-to-documents.com/proof.pdf",
                "recent_work": "https://portfolio.com/recent_project",
            }
        }


class UserCreate(BaseModel):
    name: str
    dob: datetime
    email: EmailStr
    password: str
    gender: Literal["male", "female", "other"]
    level: Literal["enthusiast", "beginner", "film_school_student", "professional"]

    total_industry_experience: Optional[int] = Field(None, ge=0)
    valid_documents: Optional[str]
    recent_work: Optional[str]
    friends: List[str] = []

    #@validator("total_industry_experience", always=True)
    def require_experience_for_professional(cls, v, values):
        if values.get("level") == "professional" and v is None:
            raise ValueError("Total industry experience is required for professionals")
        return v

    #@validator("valid_documents", always=True)
    def require_documents_for_specific_levels(cls, v, values):
        if values.get("level") in ["professional", "film_school_student"] and not v:
            raise ValueError("Valid documents are required for professionals and film school students")
        return v

    #@validator("recent_work", always=True)
    def require_recent_work_for_professional(cls, v, values):
        if values.get("level") == "professional" and not v:
            raise ValueError("Recent work is required for professionals")
        return v

    class Config:
        orm_mode = True
