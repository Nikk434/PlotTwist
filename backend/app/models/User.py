
# user
#  id -  generated by mongo
#  name
#  dob
#  email
#  password
#  gender
#  daily_goal
#  friends
#   [list of other users]
from typing import List, Optional
from pydantic import BaseModel, EmailStr, Field
from datetime import datetime
from bson import ObjectId
from models.daily_goals import DailyGoal

# To handle MongoDB ObjectId as string
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return str(v)


# âœ… This is the model used when storing/retrieving from the DB
class UserModel(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    name: str
    # dob: date
    dob: datetime
    email: EmailStr
    password: str
    gender: str
    daily_goal: DailyGoal
    friends: List[str] = []

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        schema_extra = {
            "example": {
                "name": "Hydra Doe",
                "dob": "1995-06-15",
                "email": "hydra@example.com",
                "password": "hashed_password_here",
                "gender": "female",
                "daily_goal": {
                    "glasses_per_day": 8,
                    "interval_minutes": 60,
                    "start_time": "09:00",
                    "end_time": "21:00"
                },
                "friends": ["60d5f4838b1b2c6f3f3f2a4d"]
            }
        }


class UserCreate(BaseModel):
    name: str
    dob: datetime
    email: EmailStr
    password: str
    gender: str
    daily_goal: DailyGoal
    friends : List[str]

    class Config:
        orm_mode = True